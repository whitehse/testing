/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __TEST_EBPF_SKEL_H__
#define __TEST_EBPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct test_ebpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *handle_tp;
	} progs;
	struct {
		struct bpf_link *handle_tp;
	} links;

#ifdef __cplusplus
	static inline struct test_ebpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct test_ebpf *open_and_load();
	static inline int load(struct test_ebpf *skel);
	static inline int attach(struct test_ebpf *skel);
	static inline void detach(struct test_ebpf *skel);
	static inline void destroy(struct test_ebpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
test_ebpf__destroy(struct test_ebpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
test_ebpf__create_skeleton(struct test_ebpf *obj);

static inline struct test_ebpf *
test_ebpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct test_ebpf *obj;
	int err;

	obj = (struct test_ebpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = test_ebpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	test_ebpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct test_ebpf *
test_ebpf__open(void)
{
	return test_ebpf__open_opts(NULL);
}

static inline int
test_ebpf__load(struct test_ebpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct test_ebpf *
test_ebpf__open_and_load(void)
{
	struct test_ebpf *obj;
	int err;

	obj = test_ebpf__open();
	if (!obj)
		return NULL;
	err = test_ebpf__load(obj);
	if (err) {
		test_ebpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
test_ebpf__attach(struct test_ebpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
test_ebpf__detach(struct test_ebpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *test_ebpf__elf_bytes(size_t *sz);

static inline int
test_ebpf__create_skeleton(struct test_ebpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "test_ebpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "test_ebp.rodata";
	s->maps[0].map = &obj->maps.rodata;
	s->maps[0].mmaped = (void **)&obj->rodata;

	s->maps[1].name = ".rodata.str1.1";
	s->maps[1].map = &obj->maps.rodata_str1_1;
	s->maps[1].mmaped = (void **)&obj->rodata_str1_1;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_tp";
	s->progs[0].prog = &obj->progs.handle_tp;
	s->progs[0].link = &obj->links.handle_tp;

	s->data = (void *)test_ebpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *test_ebpf__elf_bytes(size_t *sz)
{
	*sz = 1176;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x58\x02\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\x85\0\0\0\x0e\0\0\0\xb7\x01\0\0\x64\x2e\x0a\0\x63\x1a\xf8\xff\0\0\0\0\
\x18\x01\0\0\x6f\x6d\x20\x50\0\0\0\0\x49\x44\x20\x25\x7b\x1a\xf0\xff\0\0\0\0\
\x18\x01\0\0\x77\x72\x69\x74\0\0\0\0\x65\x20\x66\x72\x7b\x1a\xe8\xff\0\0\0\0\
\x18\x01\0\0\x73\x5f\x65\x6e\0\0\0\0\x74\x65\x72\x5f\x7b\x1a\xe0\xff\0\0\0\0\
\x18\x01\0\0\x67\x65\x72\x65\0\0\0\0\x64\x20\x73\x79\x7b\x1a\xd8\xff\0\0\0\0\
\x18\x01\0\0\x42\x50\x46\x20\0\0\0\0\x74\x72\x69\x67\x7b\x1a\xd0\xff\0\0\0\0\
\x77\0\0\0\x20\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xd0\xff\xff\xff\xb7\x02\0\
\0\x2c\0\0\0\xbf\x03\0\0\0\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\
\0\0\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\x42\x50\
\x46\x20\x74\x72\x69\x67\x67\x65\x72\x65\x64\x20\x73\x79\x73\x5f\x65\x6e\x74\
\x65\x72\x5f\x77\x72\x69\x74\x65\x20\x66\x72\x6f\x6d\x20\x50\x49\x44\x20\x25\
\x64\x2e\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4e\0\0\0\
\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x12\0\0\0\x12\0\x03\0\0\0\0\0\0\
\0\0\0\xd0\0\0\0\0\0\0\0\x07\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\
\0\x72\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x02\x04\0\x2e\x74\
\x65\x78\x74\0\x70\x69\x64\x5f\x66\x69\x6c\x74\x65\x72\0\x68\x61\x6e\x64\x6c\
\x65\x5f\x74\x70\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x74\
\x70\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\
\x72\x5f\x77\x72\x69\x74\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\x74\x65\x73\x74\
\x5f\x65\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\
\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\
\x72\x6f\x64\x61\x74\x61\x2e\x73\x74\x72\x31\x2e\x31\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5a\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xca\x01\0\0\0\0\0\0\x89\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x2a\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xd0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x01\
\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x46\0\0\0\x01\0\0\0\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\x01\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7a\0\0\0\x01\0\0\0\x32\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x21\x01\0\0\0\0\0\0\x2c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\x1c\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\
\0\0\0\xc8\x01\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x62\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x01\
\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\x01\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\
\0\0\0\0";
}

#ifdef __cplusplus
struct test_ebpf *test_ebpf::open(const struct bpf_object_open_opts *opts) { return test_ebpf__open_opts(opts); }
struct test_ebpf *test_ebpf::open_and_load() { return test_ebpf__open_and_load(); }
int test_ebpf::load(struct test_ebpf *skel) { return test_ebpf__load(skel); }
int test_ebpf::attach(struct test_ebpf *skel) { return test_ebpf__attach(skel); }
void test_ebpf::detach(struct test_ebpf *skel) { test_ebpf__detach(skel); }
void test_ebpf::destroy(struct test_ebpf *skel) { test_ebpf__destroy(skel); }
const void *test_ebpf::elf_bytes(size_t *sz) { return test_ebpf__elf_bytes(sz); }
#endif /* __cplusplus */


#endif /* __TEST_EBPF_SKEL_H__ */
