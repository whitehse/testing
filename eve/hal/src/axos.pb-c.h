/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: axos.proto */

#ifndef PROTOBUF_C_axos_2eproto__INCLUDED
#define PROTOBUF_C_axos_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Axos__OntMissing Axos__OntMissing;
typedef struct _Axos__OntDsSdber Axos__OntDsSdber;
typedef struct _Axos__OntUsSdber Axos__OntUsSdber;
typedef struct _Axos__OntArrival Axos__OntArrival;
typedef struct _Axos__OntDeparture Axos__OntDeparture;
typedef struct _Axos__UserLogin Axos__UserLogin;
typedef struct _Axos__UserLogout Axos__UserLogout;
typedef struct _Axos__OntEthDown Axos__OntEthDown;
typedef struct _Axos__OntEthDownClear Axos__OntEthDownClear;
typedef struct _Axos__OntDyingGasp Axos__OntDyingGasp;
typedef struct _Axos__OntDyingGaspClear Axos__OntDyingGaspClear;
typedef struct _Axos__LowRxOptPwrNe Axos__LowRxOptPwrNe;
typedef struct _Axos__NtpServerReachability Axos__NtpServerReachability;
typedef struct _Axos__NtpServerReachabilityClear Axos__NtpServerReachabilityClear;
typedef struct _Axos__DhcpLeaseEstablishment Axos__DhcpLeaseEstablishment;
typedef struct _Axos__DhcpLeaseTermination Axos__DhcpLeaseTermination;
typedef struct _Axos__LossOfPon Axos__LossOfPon;
typedef struct _Axos__LossOfPonClear Axos__LossOfPonClear;
typedef struct _Axos__OmciCommFail Axos__OmciCommFail;
typedef struct _Axos__OntSwMismatch Axos__OntSwMismatch;
typedef struct _Axos__OntSwMismatchClear Axos__OntSwMismatchClear;
typedef struct _Axos__OntDownloadStart Axos__OntDownloadStart;
typedef struct _Axos__OntDownloadFail Axos__OntDownloadFail;


/* --- enums --- */

typedef enum _Axos__Vendor {
  AXOS__VENDOR__CXNK = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(AXOS__VENDOR)
} Axos__Vendor;
typedef enum _Axos__EthPort {
  AXOS__ETH_PORT__g1 = 0,
  AXOS__ETH_PORT__g2 = 1,
  AXOS__ETH_PORT__g3 = 2,
  AXOS__ETH_PORT__g4 = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(AXOS__ETH_PORT)
} Axos__EthPort;
typedef enum _Axos__PonPort {
  AXOS__PON_PORT__gp1 = 0,
  AXOS__PON_PORT__gp2 = 1,
  AXOS__PON_PORT__gp3 = 2,
  AXOS__PON_PORT__gp4 = 3,
  AXOS__PON_PORT__gp5 = 4,
  AXOS__PON_PORT__gp6 = 5,
  AXOS__PON_PORT__gp7 = 6,
  AXOS__PON_PORT__gp8 = 7,
  AXOS__PON_PORT__gp9 = 8,
  AXOS__PON_PORT__gp10 = 9,
  AXOS__PON_PORT__gp11 = 10,
  AXOS__PON_PORT__gp12 = 11,
  AXOS__PON_PORT__gp13 = 12,
  AXOS__PON_PORT__gp14 = 13,
  AXOS__PON_PORT__gp15 = 14,
  AXOS__PON_PORT__gp16 = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(AXOS__PON_PORT)
} Axos__PonPort;

/* --- messages --- */

struct  _Axos__OntMissing
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_MISSING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_missing__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntDsSdber
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_DS_SDBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_ds_sdber__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntUsSdber
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_US_SDBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_us_sdber__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntArrival
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_ARRIVAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_arrival__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntDeparture
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_DEPARTURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_departure__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__UserLogin
{
  ProtobufCMessage base;
  int64_t event_time;
  char *system_name;
  uint32_t system_ip;
  uint32_t session_ip;
  int64_t session_id;
  char *user_name;
};
#define AXOS__USER_LOGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__user_login__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _Axos__UserLogout
{
  ProtobufCMessage base;
  int64_t event_time;
  char *system_name;
  uint32_t system_ip;
  uint32_t session_ip;
  int64_t session_id;
  char *user_name;
};
#define AXOS__USER_LOGOUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__user_logout__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _Axos__OntEthDown
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__EthPort port;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_ETH_DOWN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_eth_down__descriptor) \
    , 0, 0, AXOS__ETH_PORT__g1, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntEthDownClear
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__EthPort port;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_ETH_DOWN_CLEAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_eth_down_clear__descriptor) \
    , 0, 0, AXOS__ETH_PORT__g1, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntDyingGasp
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_DYING_GASP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_dying_gasp__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntDyingGaspClear
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_DYING_GASP_CLEAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_dying_gasp_clear__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__LowRxOptPwrNe
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__LOW_RX_OPT_PWR_NE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__low_rx_opt_pwr_ne__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__NtpServerReachability
{
  ProtobufCMessage base;
  int64_t event_time;
  char *system_name;
  uint32_t system_ip;
};
#define AXOS__NTP_SERVER_REACHABILITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ntp_server_reachability__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0 }


struct  _Axos__NtpServerReachabilityClear
{
  ProtobufCMessage base;
  int64_t event_time;
  char *system_name;
  uint32_t system_ip;
};
#define AXOS__NTP_SERVER_REACHABILITY_CLEAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ntp_server_reachability_clear__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0 }


struct  _Axos__DhcpLeaseEstablishment
{
  ProtobufCMessage base;
  int64_t event_time;
  uint32_t ip;
  int64_t mac;
  int32_t ont_id;
  Axos__EthPort port;
  int32_t vlan_id;
  int32_t c_vlan_id;
};
#define AXOS__DHCP_LEASE_ESTABLISHMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__dhcp_lease_establishment__descriptor) \
    , 0, 0, 0, 0, AXOS__ETH_PORT__g1, 0, 0 }


struct  _Axos__DhcpLeaseTermination
{
  ProtobufCMessage base;
  int64_t event_time;
  uint32_t ip;
  int64_t mac;
  int32_t ont_id;
  Axos__EthPort port;
  int32_t vlan_id;
  int32_t c_vlan_id;
};
#define AXOS__DHCP_LEASE_TERMINATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__dhcp_lease_termination__descriptor) \
    , 0, 0, 0, 0, AXOS__ETH_PORT__g1, 0, 0 }


struct  _Axos__LossOfPon
{
  ProtobufCMessage base;
  int64_t event_time;
  char *system_name;
  uint32_t system_ip;
  int32_t shelf_id;
  int32_t slot_id;
  Axos__PonPort port;
};
#define AXOS__LOSS_OF_PON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__loss_of_pon__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, AXOS__PON_PORT__gp1 }


struct  _Axos__LossOfPonClear
{
  ProtobufCMessage base;
  int64_t event_time;
  char *system_name;
  uint32_t system_ip;
  int32_t shelf_id;
  int32_t slot_id;
  Axos__PonPort port;
};
#define AXOS__LOSS_OF_PON_CLEAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__loss_of_pon_clear__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, AXOS__PON_PORT__gp1 }


struct  _Axos__OmciCommFail
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__OMCI_COMM_FAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__omci_comm_fail__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntSwMismatch
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_SW_MISMATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_sw_mismatch__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntSwMismatchClear
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_SW_MISMATCH_CLEAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_sw_mismatch_clear__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntDownloadStart
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_DOWNLOAD_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_download_start__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


struct  _Axos__OntDownloadFail
{
  ProtobufCMessage base;
  int64_t event_time;
  int32_t ont_id;
  Axos__Vendor vendor_id;
  int32_t serial_number;
};
#define AXOS__ONT_DOWNLOAD_FAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axos__ont_download_fail__descriptor) \
    , 0, 0, AXOS__VENDOR__CXNK, 0 }


/* Axos__OntMissing methods */
void   axos__ont_missing__init
                     (Axos__OntMissing         *message);
size_t axos__ont_missing__get_packed_size
                     (const Axos__OntMissing   *message);
size_t axos__ont_missing__pack
                     (const Axos__OntMissing   *message,
                      uint8_t             *out);
size_t axos__ont_missing__pack_to_buffer
                     (const Axos__OntMissing   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntMissing *
       axos__ont_missing__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_missing__free_unpacked
                     (Axos__OntMissing *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntDsSdber methods */
void   axos__ont_ds_sdber__init
                     (Axos__OntDsSdber         *message);
size_t axos__ont_ds_sdber__get_packed_size
                     (const Axos__OntDsSdber   *message);
size_t axos__ont_ds_sdber__pack
                     (const Axos__OntDsSdber   *message,
                      uint8_t             *out);
size_t axos__ont_ds_sdber__pack_to_buffer
                     (const Axos__OntDsSdber   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntDsSdber *
       axos__ont_ds_sdber__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_ds_sdber__free_unpacked
                     (Axos__OntDsSdber *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntUsSdber methods */
void   axos__ont_us_sdber__init
                     (Axos__OntUsSdber         *message);
size_t axos__ont_us_sdber__get_packed_size
                     (const Axos__OntUsSdber   *message);
size_t axos__ont_us_sdber__pack
                     (const Axos__OntUsSdber   *message,
                      uint8_t             *out);
size_t axos__ont_us_sdber__pack_to_buffer
                     (const Axos__OntUsSdber   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntUsSdber *
       axos__ont_us_sdber__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_us_sdber__free_unpacked
                     (Axos__OntUsSdber *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntArrival methods */
void   axos__ont_arrival__init
                     (Axos__OntArrival         *message);
size_t axos__ont_arrival__get_packed_size
                     (const Axos__OntArrival   *message);
size_t axos__ont_arrival__pack
                     (const Axos__OntArrival   *message,
                      uint8_t             *out);
size_t axos__ont_arrival__pack_to_buffer
                     (const Axos__OntArrival   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntArrival *
       axos__ont_arrival__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_arrival__free_unpacked
                     (Axos__OntArrival *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntDeparture methods */
void   axos__ont_departure__init
                     (Axos__OntDeparture         *message);
size_t axos__ont_departure__get_packed_size
                     (const Axos__OntDeparture   *message);
size_t axos__ont_departure__pack
                     (const Axos__OntDeparture   *message,
                      uint8_t             *out);
size_t axos__ont_departure__pack_to_buffer
                     (const Axos__OntDeparture   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntDeparture *
       axos__ont_departure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_departure__free_unpacked
                     (Axos__OntDeparture *message,
                      ProtobufCAllocator *allocator);
/* Axos__UserLogin methods */
void   axos__user_login__init
                     (Axos__UserLogin         *message);
size_t axos__user_login__get_packed_size
                     (const Axos__UserLogin   *message);
size_t axos__user_login__pack
                     (const Axos__UserLogin   *message,
                      uint8_t             *out);
size_t axos__user_login__pack_to_buffer
                     (const Axos__UserLogin   *message,
                      ProtobufCBuffer     *buffer);
Axos__UserLogin *
       axos__user_login__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__user_login__free_unpacked
                     (Axos__UserLogin *message,
                      ProtobufCAllocator *allocator);
/* Axos__UserLogout methods */
void   axos__user_logout__init
                     (Axos__UserLogout         *message);
size_t axos__user_logout__get_packed_size
                     (const Axos__UserLogout   *message);
size_t axos__user_logout__pack
                     (const Axos__UserLogout   *message,
                      uint8_t             *out);
size_t axos__user_logout__pack_to_buffer
                     (const Axos__UserLogout   *message,
                      ProtobufCBuffer     *buffer);
Axos__UserLogout *
       axos__user_logout__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__user_logout__free_unpacked
                     (Axos__UserLogout *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntEthDown methods */
void   axos__ont_eth_down__init
                     (Axos__OntEthDown         *message);
size_t axos__ont_eth_down__get_packed_size
                     (const Axos__OntEthDown   *message);
size_t axos__ont_eth_down__pack
                     (const Axos__OntEthDown   *message,
                      uint8_t             *out);
size_t axos__ont_eth_down__pack_to_buffer
                     (const Axos__OntEthDown   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntEthDown *
       axos__ont_eth_down__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_eth_down__free_unpacked
                     (Axos__OntEthDown *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntEthDownClear methods */
void   axos__ont_eth_down_clear__init
                     (Axos__OntEthDownClear         *message);
size_t axos__ont_eth_down_clear__get_packed_size
                     (const Axos__OntEthDownClear   *message);
size_t axos__ont_eth_down_clear__pack
                     (const Axos__OntEthDownClear   *message,
                      uint8_t             *out);
size_t axos__ont_eth_down_clear__pack_to_buffer
                     (const Axos__OntEthDownClear   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntEthDownClear *
       axos__ont_eth_down_clear__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_eth_down_clear__free_unpacked
                     (Axos__OntEthDownClear *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntDyingGasp methods */
void   axos__ont_dying_gasp__init
                     (Axos__OntDyingGasp         *message);
size_t axos__ont_dying_gasp__get_packed_size
                     (const Axos__OntDyingGasp   *message);
size_t axos__ont_dying_gasp__pack
                     (const Axos__OntDyingGasp   *message,
                      uint8_t             *out);
size_t axos__ont_dying_gasp__pack_to_buffer
                     (const Axos__OntDyingGasp   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntDyingGasp *
       axos__ont_dying_gasp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_dying_gasp__free_unpacked
                     (Axos__OntDyingGasp *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntDyingGaspClear methods */
void   axos__ont_dying_gasp_clear__init
                     (Axos__OntDyingGaspClear         *message);
size_t axos__ont_dying_gasp_clear__get_packed_size
                     (const Axos__OntDyingGaspClear   *message);
size_t axos__ont_dying_gasp_clear__pack
                     (const Axos__OntDyingGaspClear   *message,
                      uint8_t             *out);
size_t axos__ont_dying_gasp_clear__pack_to_buffer
                     (const Axos__OntDyingGaspClear   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntDyingGaspClear *
       axos__ont_dying_gasp_clear__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_dying_gasp_clear__free_unpacked
                     (Axos__OntDyingGaspClear *message,
                      ProtobufCAllocator *allocator);
/* Axos__LowRxOptPwrNe methods */
void   axos__low_rx_opt_pwr_ne__init
                     (Axos__LowRxOptPwrNe         *message);
size_t axos__low_rx_opt_pwr_ne__get_packed_size
                     (const Axos__LowRxOptPwrNe   *message);
size_t axos__low_rx_opt_pwr_ne__pack
                     (const Axos__LowRxOptPwrNe   *message,
                      uint8_t             *out);
size_t axos__low_rx_opt_pwr_ne__pack_to_buffer
                     (const Axos__LowRxOptPwrNe   *message,
                      ProtobufCBuffer     *buffer);
Axos__LowRxOptPwrNe *
       axos__low_rx_opt_pwr_ne__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__low_rx_opt_pwr_ne__free_unpacked
                     (Axos__LowRxOptPwrNe *message,
                      ProtobufCAllocator *allocator);
/* Axos__NtpServerReachability methods */
void   axos__ntp_server_reachability__init
                     (Axos__NtpServerReachability         *message);
size_t axos__ntp_server_reachability__get_packed_size
                     (const Axos__NtpServerReachability   *message);
size_t axos__ntp_server_reachability__pack
                     (const Axos__NtpServerReachability   *message,
                      uint8_t             *out);
size_t axos__ntp_server_reachability__pack_to_buffer
                     (const Axos__NtpServerReachability   *message,
                      ProtobufCBuffer     *buffer);
Axos__NtpServerReachability *
       axos__ntp_server_reachability__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ntp_server_reachability__free_unpacked
                     (Axos__NtpServerReachability *message,
                      ProtobufCAllocator *allocator);
/* Axos__NtpServerReachabilityClear methods */
void   axos__ntp_server_reachability_clear__init
                     (Axos__NtpServerReachabilityClear         *message);
size_t axos__ntp_server_reachability_clear__get_packed_size
                     (const Axos__NtpServerReachabilityClear   *message);
size_t axos__ntp_server_reachability_clear__pack
                     (const Axos__NtpServerReachabilityClear   *message,
                      uint8_t             *out);
size_t axos__ntp_server_reachability_clear__pack_to_buffer
                     (const Axos__NtpServerReachabilityClear   *message,
                      ProtobufCBuffer     *buffer);
Axos__NtpServerReachabilityClear *
       axos__ntp_server_reachability_clear__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ntp_server_reachability_clear__free_unpacked
                     (Axos__NtpServerReachabilityClear *message,
                      ProtobufCAllocator *allocator);
/* Axos__DhcpLeaseEstablishment methods */
void   axos__dhcp_lease_establishment__init
                     (Axos__DhcpLeaseEstablishment         *message);
size_t axos__dhcp_lease_establishment__get_packed_size
                     (const Axos__DhcpLeaseEstablishment   *message);
size_t axos__dhcp_lease_establishment__pack
                     (const Axos__DhcpLeaseEstablishment   *message,
                      uint8_t             *out);
size_t axos__dhcp_lease_establishment__pack_to_buffer
                     (const Axos__DhcpLeaseEstablishment   *message,
                      ProtobufCBuffer     *buffer);
Axos__DhcpLeaseEstablishment *
       axos__dhcp_lease_establishment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__dhcp_lease_establishment__free_unpacked
                     (Axos__DhcpLeaseEstablishment *message,
                      ProtobufCAllocator *allocator);
/* Axos__DhcpLeaseTermination methods */
void   axos__dhcp_lease_termination__init
                     (Axos__DhcpLeaseTermination         *message);
size_t axos__dhcp_lease_termination__get_packed_size
                     (const Axos__DhcpLeaseTermination   *message);
size_t axos__dhcp_lease_termination__pack
                     (const Axos__DhcpLeaseTermination   *message,
                      uint8_t             *out);
size_t axos__dhcp_lease_termination__pack_to_buffer
                     (const Axos__DhcpLeaseTermination   *message,
                      ProtobufCBuffer     *buffer);
Axos__DhcpLeaseTermination *
       axos__dhcp_lease_termination__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__dhcp_lease_termination__free_unpacked
                     (Axos__DhcpLeaseTermination *message,
                      ProtobufCAllocator *allocator);
/* Axos__LossOfPon methods */
void   axos__loss_of_pon__init
                     (Axos__LossOfPon         *message);
size_t axos__loss_of_pon__get_packed_size
                     (const Axos__LossOfPon   *message);
size_t axos__loss_of_pon__pack
                     (const Axos__LossOfPon   *message,
                      uint8_t             *out);
size_t axos__loss_of_pon__pack_to_buffer
                     (const Axos__LossOfPon   *message,
                      ProtobufCBuffer     *buffer);
Axos__LossOfPon *
       axos__loss_of_pon__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__loss_of_pon__free_unpacked
                     (Axos__LossOfPon *message,
                      ProtobufCAllocator *allocator);
/* Axos__LossOfPonClear methods */
void   axos__loss_of_pon_clear__init
                     (Axos__LossOfPonClear         *message);
size_t axos__loss_of_pon_clear__get_packed_size
                     (const Axos__LossOfPonClear   *message);
size_t axos__loss_of_pon_clear__pack
                     (const Axos__LossOfPonClear   *message,
                      uint8_t             *out);
size_t axos__loss_of_pon_clear__pack_to_buffer
                     (const Axos__LossOfPonClear   *message,
                      ProtobufCBuffer     *buffer);
Axos__LossOfPonClear *
       axos__loss_of_pon_clear__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__loss_of_pon_clear__free_unpacked
                     (Axos__LossOfPonClear *message,
                      ProtobufCAllocator *allocator);
/* Axos__OmciCommFail methods */
void   axos__omci_comm_fail__init
                     (Axos__OmciCommFail         *message);
size_t axos__omci_comm_fail__get_packed_size
                     (const Axos__OmciCommFail   *message);
size_t axos__omci_comm_fail__pack
                     (const Axos__OmciCommFail   *message,
                      uint8_t             *out);
size_t axos__omci_comm_fail__pack_to_buffer
                     (const Axos__OmciCommFail   *message,
                      ProtobufCBuffer     *buffer);
Axos__OmciCommFail *
       axos__omci_comm_fail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__omci_comm_fail__free_unpacked
                     (Axos__OmciCommFail *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntSwMismatch methods */
void   axos__ont_sw_mismatch__init
                     (Axos__OntSwMismatch         *message);
size_t axos__ont_sw_mismatch__get_packed_size
                     (const Axos__OntSwMismatch   *message);
size_t axos__ont_sw_mismatch__pack
                     (const Axos__OntSwMismatch   *message,
                      uint8_t             *out);
size_t axos__ont_sw_mismatch__pack_to_buffer
                     (const Axos__OntSwMismatch   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntSwMismatch *
       axos__ont_sw_mismatch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_sw_mismatch__free_unpacked
                     (Axos__OntSwMismatch *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntSwMismatchClear methods */
void   axos__ont_sw_mismatch_clear__init
                     (Axos__OntSwMismatchClear         *message);
size_t axos__ont_sw_mismatch_clear__get_packed_size
                     (const Axos__OntSwMismatchClear   *message);
size_t axos__ont_sw_mismatch_clear__pack
                     (const Axos__OntSwMismatchClear   *message,
                      uint8_t             *out);
size_t axos__ont_sw_mismatch_clear__pack_to_buffer
                     (const Axos__OntSwMismatchClear   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntSwMismatchClear *
       axos__ont_sw_mismatch_clear__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_sw_mismatch_clear__free_unpacked
                     (Axos__OntSwMismatchClear *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntDownloadStart methods */
void   axos__ont_download_start__init
                     (Axos__OntDownloadStart         *message);
size_t axos__ont_download_start__get_packed_size
                     (const Axos__OntDownloadStart   *message);
size_t axos__ont_download_start__pack
                     (const Axos__OntDownloadStart   *message,
                      uint8_t             *out);
size_t axos__ont_download_start__pack_to_buffer
                     (const Axos__OntDownloadStart   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntDownloadStart *
       axos__ont_download_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_download_start__free_unpacked
                     (Axos__OntDownloadStart *message,
                      ProtobufCAllocator *allocator);
/* Axos__OntDownloadFail methods */
void   axos__ont_download_fail__init
                     (Axos__OntDownloadFail         *message);
size_t axos__ont_download_fail__get_packed_size
                     (const Axos__OntDownloadFail   *message);
size_t axos__ont_download_fail__pack
                     (const Axos__OntDownloadFail   *message,
                      uint8_t             *out);
size_t axos__ont_download_fail__pack_to_buffer
                     (const Axos__OntDownloadFail   *message,
                      ProtobufCBuffer     *buffer);
Axos__OntDownloadFail *
       axos__ont_download_fail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axos__ont_download_fail__free_unpacked
                     (Axos__OntDownloadFail *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Axos__OntMissing_Closure)
                 (const Axos__OntMissing *message,
                  void *closure_data);
typedef void (*Axos__OntDsSdber_Closure)
                 (const Axos__OntDsSdber *message,
                  void *closure_data);
typedef void (*Axos__OntUsSdber_Closure)
                 (const Axos__OntUsSdber *message,
                  void *closure_data);
typedef void (*Axos__OntArrival_Closure)
                 (const Axos__OntArrival *message,
                  void *closure_data);
typedef void (*Axos__OntDeparture_Closure)
                 (const Axos__OntDeparture *message,
                  void *closure_data);
typedef void (*Axos__UserLogin_Closure)
                 (const Axos__UserLogin *message,
                  void *closure_data);
typedef void (*Axos__UserLogout_Closure)
                 (const Axos__UserLogout *message,
                  void *closure_data);
typedef void (*Axos__OntEthDown_Closure)
                 (const Axos__OntEthDown *message,
                  void *closure_data);
typedef void (*Axos__OntEthDownClear_Closure)
                 (const Axos__OntEthDownClear *message,
                  void *closure_data);
typedef void (*Axos__OntDyingGasp_Closure)
                 (const Axos__OntDyingGasp *message,
                  void *closure_data);
typedef void (*Axos__OntDyingGaspClear_Closure)
                 (const Axos__OntDyingGaspClear *message,
                  void *closure_data);
typedef void (*Axos__LowRxOptPwrNe_Closure)
                 (const Axos__LowRxOptPwrNe *message,
                  void *closure_data);
typedef void (*Axos__NtpServerReachability_Closure)
                 (const Axos__NtpServerReachability *message,
                  void *closure_data);
typedef void (*Axos__NtpServerReachabilityClear_Closure)
                 (const Axos__NtpServerReachabilityClear *message,
                  void *closure_data);
typedef void (*Axos__DhcpLeaseEstablishment_Closure)
                 (const Axos__DhcpLeaseEstablishment *message,
                  void *closure_data);
typedef void (*Axos__DhcpLeaseTermination_Closure)
                 (const Axos__DhcpLeaseTermination *message,
                  void *closure_data);
typedef void (*Axos__LossOfPon_Closure)
                 (const Axos__LossOfPon *message,
                  void *closure_data);
typedef void (*Axos__LossOfPonClear_Closure)
                 (const Axos__LossOfPonClear *message,
                  void *closure_data);
typedef void (*Axos__OmciCommFail_Closure)
                 (const Axos__OmciCommFail *message,
                  void *closure_data);
typedef void (*Axos__OntSwMismatch_Closure)
                 (const Axos__OntSwMismatch *message,
                  void *closure_data);
typedef void (*Axos__OntSwMismatchClear_Closure)
                 (const Axos__OntSwMismatchClear *message,
                  void *closure_data);
typedef void (*Axos__OntDownloadStart_Closure)
                 (const Axos__OntDownloadStart *message,
                  void *closure_data);
typedef void (*Axos__OntDownloadFail_Closure)
                 (const Axos__OntDownloadFail *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    axos__vendor__descriptor;
extern const ProtobufCEnumDescriptor    axos__eth_port__descriptor;
extern const ProtobufCEnumDescriptor    axos__pon_port__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_missing__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_ds_sdber__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_us_sdber__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_arrival__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_departure__descriptor;
extern const ProtobufCMessageDescriptor axos__user_login__descriptor;
extern const ProtobufCMessageDescriptor axos__user_logout__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_eth_down__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_eth_down_clear__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_dying_gasp__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_dying_gasp_clear__descriptor;
extern const ProtobufCMessageDescriptor axos__low_rx_opt_pwr_ne__descriptor;
extern const ProtobufCMessageDescriptor axos__ntp_server_reachability__descriptor;
extern const ProtobufCMessageDescriptor axos__ntp_server_reachability_clear__descriptor;
extern const ProtobufCMessageDescriptor axos__dhcp_lease_establishment__descriptor;
extern const ProtobufCMessageDescriptor axos__dhcp_lease_termination__descriptor;
extern const ProtobufCMessageDescriptor axos__loss_of_pon__descriptor;
extern const ProtobufCMessageDescriptor axos__loss_of_pon_clear__descriptor;
extern const ProtobufCMessageDescriptor axos__omci_comm_fail__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_sw_mismatch__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_sw_mismatch_clear__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_download_start__descriptor;
extern const ProtobufCMessageDescriptor axos__ont_download_fail__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_axos_2eproto__INCLUDED */
