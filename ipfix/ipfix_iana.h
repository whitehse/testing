#ifndef IPFIX_IANA_H
#define IPFIX_IANA_H

enum IANA_ABSTRACT_TYPE {
  IANA_TYPE_BASICLIST,
  IANA_TYPE_BOOLEAN,
  IANA_TYPE_DATETIMEMICROSECONDS,
  IANA_TYPE_DATETIMEMILLISECONDS,
  IANA_TYPE_DATETIMENANOSECONDS,
  IANA_TYPE_DATETIMESECONDS,
  IANA_TYPE_FLOAT64,
  IANA_TYPE_IPV4ADDRESS,
  IANA_TYPE_IPV6ADDRESS,
  IANA_TYPE_MACADDRESS,
  IANA_TYPE_OCTETARRAY,
  IANA_TYPE_SIGNED32,
  IANA_TYPE_STRING,
  IANA_TYPE_SUBTEMPLATELIST,
  IANA_TYPE_SUBTEMPLATEMULTILIST,
  IANA_TYPE_UNSIGNED8,
  IANA_TYPE_UNSIGNED16,
  IANA_TYPE_UNSIGNED32,
  IANA_TYPE_UNSIGNED64,
  IANA_TYPE_UNSIGNED256
};

enum IANA_UNITS {
  IANA_UNIT_OCTETS,
  IANA_UNIT_PACKETS,
  IANA_UNIT_FLOWS,
  IANA_UNIT_BITS,
  IANA_UNIT_SECONDS,
  IANA_UNIT_MILLISECONDS,
  IANA_UNIT_MICROSECONDS,
  IANA_UNIT_NANOSECONDS,
  IANA_UNIT_MESSAGES,
  IANA_UNIT_HOPS,
  IANA_UNIT_ENTRIES,
  IANA_UNIT_4_OCTET_WORDS,
  IANA_UNIT_INFERRED,
  IANA_UNIT_FRAMES,
  IANA_UNIT_PORTS
};
struct iana_ipfix {
  uint32_t elementid; /* 8 */
  char *name; /*sourceIPv4Address */
  int abstract_data_type; /* ipv4Address/IANA_IPV4ADDRESS */
  int unit; /* octets/IANA_UNIT_OCTETS */
  int low_range;
  int high_range;
};

#endif // IPFIX_IANA_H
